{"version":3,"file":"AgentCan.jsx","names":["_react","require","_fiber","_drei","THREE","_interopRequireWildcard","_jsxRuntime","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","_typeof","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","a","_arrayLikeToArray","toString","slice","constructor","name","Array","from","test","length","l","Symbol","iterator","u","next","done","push","value","isArray","AgentCan","_ref","position","agent","isActive","onClick","rotationState","meshRef","useRef","_useState","useState","_useState2","hovered","setHovered","targetRotationY","Math","PI","useFrame","state","delta","current","rotation","y","MathUtils","lerp","sin","clock","elapsedTime","getCategoryColor","category","toLowerCase","color","jsxs","ref","onPointerOver","onPointerOut","scale","className","children","jsx","args","MeshDistortMaterial","distort","speed","metalness","roughness","transparent","opacity","_default","exports"],"sources":["../../src/models/AgentCan.tsx"],"sourcesContent":["\r\nimport { useRef, useState } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { MeshDistortMaterial } from \"@react-three/drei\";\r\nimport { Mesh } from \"three\";\r\nimport * as THREE from \"three\";\r\nimport { AgentData } from \"../types/agent\";\r\n\r\ninterface AgentCanProps {\r\n  position: [number, number, number];\r\n  agent: AgentData;\r\n  isActive: boolean;\r\n  onClick: () => void;\r\n  rotationState: number;\r\n}\r\n\r\nconst AgentCan = ({ position, agent, isActive, onClick, rotationState }: AgentCanProps) => {\r\n  const meshRef = useRef<Mesh>(null);\r\n  const [hovered, setHovered] = useState(false);\r\n  \r\n  // Calculate target rotation based on the rotationState (0-3)\r\n  const targetRotationY = rotationState * Math.PI / 2;\r\n  \r\n  useFrame((state, delta) => {\r\n    if (!meshRef.current) return;\r\n    \r\n    // Animate to the target rotation with a spring-like effect\r\n    meshRef.current.rotation.y = THREE.MathUtils.lerp(\r\n      meshRef.current.rotation.y,\r\n      targetRotationY,\r\n      delta * 2.5\r\n    );\r\n    \r\n    // If active, add a subtle floating animation\r\n    if (isActive) {\r\n      meshRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime * 1.5) * 0.05;\r\n    } else {\r\n      meshRef.current.position.y = position[1];\r\n    }\r\n  });\r\n\r\n  // Generate a color based on the agent category\r\n  const getCategoryColor = (category: string) => {\r\n    switch (category.toLowerCase()) {\r\n      case 'crypto':\r\n        return \"#76E4F7\"; // sky blue\r\n      case 'medical':\r\n        return \"#9AE6B4\"; // mint green\r\n      case 'smart contract':\r\n        return \"#B794F4\"; // lavender\r\n      case 'legal':\r\n        return \"#FEEBC8\"; // cream\r\n      case 'voice':\r\n        return \"#FBB6CE\"; // pink\r\n      default:\r\n        return \"#B794F4\"; // default lavender\r\n    }\r\n  };\r\n\r\n  const color = getCategoryColor(agent.category);\r\n\r\n  return (\r\n    <mesh\r\n      ref={meshRef}\r\n      position={[position[0], position[1], position[2]]}\r\n      onClick={onClick}\r\n      onPointerOver={() => setHovered(true)}\r\n      onPointerOut={() => setHovered(false)}\r\n      scale={isActive ? 1.05 : 1}\r\n      className=\"spring-transition\"\r\n    >\r\n      <cylinderGeometry args={[0.7, 0.7, 1.5, 32]} />\r\n      <MeshDistortMaterial\r\n        color={color}\r\n        distort={isActive ? 0.2 : 0.1}\r\n        speed={isActive ? 1.5 : 1}\r\n        metalness={0.1}\r\n        roughness={0.4}\r\n        transparent\r\n        opacity={0.9}\r\n      />\r\n      \r\n      {/* Top and bottom caps */}\r\n      <mesh position={[0, 0.76, 0]}>\r\n        <cylinderGeometry args={[0.7, 0.7, 0.05, 32]} />\r\n        <meshStandardMaterial color=\"#f8f8f8\" metalness={0.4} roughness={0.3} />\r\n      </mesh>\r\n      \r\n      <mesh position={[0, -0.76, 0]}>\r\n        <cylinderGeometry args={[0.7, 0.7, 0.05, 32]} />\r\n        <meshStandardMaterial color=\"#f8f8f8\" metalness={0.4} roughness={0.3} />\r\n      </mesh>\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default AgentCan;\r\n"],"mappings":"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","ignoreList":[]}